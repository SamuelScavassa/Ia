# -*- coding: utf-8 -*-
"""KNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rVVxejEWfp0cnsJsJkG6ceSekf8-JKN8

# **CÓDIGO LEGADO ⬇️**
"""

import pandas as pd
#base = pd.read_csv('./drive/MyDrive/att-definitiva2.csv')
base = pd.read_csv('./att-definitiva2-1.csv')
base = base.drop(columns=['SpType'])

base.head()

import pandas as pd
import numpy as np

import numpy as np


msk = np.random.rand(len(base)) < 0.8 # cria uma mascara com as posicoes
train = base[msk]
test = base[~msk]

"""# **CÓDIGO LEGADO ⬆️**"""

train = pd.read_csv('./drive/MyDrive/FATEC/treino.csv')
test = pd.read_csv('./drive/MyDrive/FATEC/teste.csv')

acertos = 0
erros = 0
GG = []
AA = []
GE = []
AE = []

for x in np.array(test):
  print(x[3])
  vizinhos = list()
  tres = []
  classs = None

  for estrela in np.array(train):
    distancia = np.linalg.norm(x - estrela)
    vizinhos.append([distancia, estrela[3]])

  vizinhos = sorted(vizinhos, key = lambda x: x[0])
  
  for i in range(0,3):   
    retirar = vizinhos[i]
    tres.append(retirar[1])
    
  mostrar = (sum(tres)) / 3  
  
  print('Ela é: ')
  if(mostrar > 0.6):
    print('Gigante')
    classs = 1
  else:
    print('Anã')
    classs = 0

  if(classs == x[3]):
    if(classs == 1):
      GG.append(classs)
    else:
      AA.append(classs)
    acertos += 1
  else:
    #print(x) -> para mostrar os itens errados
    if(classs == 1):
      AE.append(classs)
    else:
      GE.append(classs)
    erros += 1

  print('\n-----------------------------------------------------------')
print('\nTotal: ', len(test),'\nAcertos: ', acertos, '\nErros: ', erros)
print('\nMATRIZ DE CONFUSÃO:\n')
print('      Anã | Gigante')
print('Anã: ', len(AA), '|', len(AE))
print('Gig: ', len(GE), '  |' , len(GG))