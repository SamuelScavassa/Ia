# -*- coding: utf-8 -*-
"""Vizinho mais próximo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12afDRRCaZ8p0srL7kC-ydd_T39Uz8u2n
"""

import pandas as pd
base = pd.read_csv('./drive/MyDrive/att-definitiva2.csv')
base = base.drop(columns=['SpType'])

base.head()



import numpy as np

msk = np.random.rand(len(base)) < 0.5 # cria uma mascara com as posicoes
train = base[msk]
test = base[~msk]

test.head()

import numpy as np
a = np.array((10,8,9))
b = np.array((4,5,6))
c = np.array((4,2,6))
d = np.array((7,1,6))

distb = np.linalg.norm(a-b)
distc = np.linalg.norm(a-c)
distd = np.linalg.norm(a-d)

if(distb<distc and distb<distd): print("Casse B")
if(distc<distb and distc<distd): print("Casse C")
if(distd<distb and distd<distc): print("Casse D")

vmag = np.array(train["Vmag"])
bv = np.array(train["B-V"])
amag = np.array(train["Amag"])
tc = np.array(train["TargetClass"])

print(vmag)
print(bv)
print(amag)
print(tc)

teste = base.loc[1:5]

lista = []
for x in teste.loc[1]:
  lista.append(float(x))
a = np.array(lista)

lista = []
for x in teste.loc[2]:
  lista.append(float(x))
b = np.array(lista)

lista = []
for x in teste.loc[3]:
  lista.append(float(x))
c = np.array(lista)

lista = []
for x in teste.loc[4]:
  lista.append(float(x))
d = np.array(lista)

lista = []
for x in teste.loc[5]:
  lista.append(float(x))
e = np.array(lista)
  

dist1 = np.linalg.norm(a - b)
dist2 = np.linalg.norm(a - c)
dist3 = np.linalg.norm(a - d)
dist4 = np.linalg.norm(a - e)

print(base.loc[0, "TargetClass"])
if(dist1<dist2 and dist1<dist3 and dist1<dist4): print(base.loc[1, "TargetClass"])
if(dist2<dist1 and dist2<dist3 and dist2<dist4): print(base.loc[2, "TargetClass"])
if(dist3<dist2 and dist3<dist1 and dist3<dist4): print(base.loc[3, "TargetClass"])
if(dist4<dist2 and dist4<dist3 and dist4<dist1): print(base.loc[4, "TargetClass"])

entrada = test.sample(1)
print(entrada)
resultado = 1000
mostrar = None
lista = []

for estrela in np.array(train):
  lista.append([estrela, np.linalg.norm(entrada - estrela)])

    
for i in lista:
  if(resultado > i[1]):
    resultado = i[1]
    mostrar = i[0]

if(mostrar[3] == 1):
  print('Gigante')
else:
  print('Anã')

entrada = test.sample(1)
print(entrada)

resultado = 1000
mostrar = None
maisProx = None

for estrela in np.array(train):
  x = np.linalg.norm(entrada - estrela)
  if(x < resultado):
    resultado = x
    mostrar = estrela[3]
    maisProx = estrela

print('\nMais próximo: ', maisProx, ' \nDistância: ', resultado, '\n')
print('Ela é: ')
if(mostrar == 1):
  print('Gigante')
else:
  print('Anã')

acertos = 0
erros = 0
distancias = []
GG = []
AA = []
GE = []
AE = []
for x in np.array(test):
  entrada = x
  print(entrada)

  resultado = 1000
  mostrar = None
  maisProx = None

  for estrela in np.array(train):
    x = np.linalg.norm(entrada - estrela)
    if(x < resultado):
      resultado = x
      mostrar = estrela[3]
      maisProx = estrela
      distancias.append(resultado)

  print('\nMais próximo: ', maisProx, ' \nDistância: ', resultado, '\n')
  print('Ela é: ')
  if(mostrar == 1):
    print('Gigante')
  else:
    print('Anã')

  if(mostrar == entrada[3]):
    if(mostrar == 1):
      GG.append(mostrar)
    else:
      AA.append(mostrar)
    acertos += 1
  else:
    if(mostrar == 1):
      AE.append(mostrar)
    else:
      GE.append(mostrar)
    erros += 1

  print('\n-----------------------------------------------------------')
print('\nTotal: ', len(test),'\nAcertos: ', acertos, '\nErros: ', erros)
print('\nMATRIZ DE CONFUSÃO:\n')
print('      Anã | Gigante')
print('Anã: ', len(AA), '|', len(AE))
print('Gig: ', len(GE), '  |' , len(GG))

import plotly.express as px
fig  = px.scatter(x = distancias, y = distancias, width = 1300)
fig.update_traces(marker = dict(size = 10, line=dict(width = 1)), selector = dict(mode = 'markers'))
fig.update_layout(title = 'Gráfico das distâncias')
fig.update_xaxes(title = 'Distâncias')
fig.update_yaxes(title = 'Distâncias')
fig.show()